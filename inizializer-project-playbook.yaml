---
# Título: Playbook para crear PAT de usuario, repositorio, webhook y notificar
# Ejecutable desde AAP/AWX
- name: Crear PAT de usuario, repositorio, webhook y notificar
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    # --- Variables de Entrada ---
    # El token que tiene permisos de administrador para crear OTROS tokens y repos.
    # admin_token_repositorio: "..." 
    
    # Parámetros de Repositorio
    # usuario: "mi_usuario"
    # grupo: "mi_org"
    # repo_base: "template-ansible-playbooks"
    # repo_nuevo: "ansible-playbook-example"
    # tipo_repositorio: "gitlab" #|"github" | "gitlab" | "gitea"
    # host_repositorio: "gitea.miempresa.com" #"api.github.com" # | "gitlab.com" | "gitea.miempresa.com"
    
    # Parámetros de Webhook
    # webhook_url: "https://awx-demo-awx.apps-crc.testing/api/v2/job_templates/7/launch/"
    # webhook_secret: "un-secreto-seguro"
    # webhook_events: ["push", "pull_request"]

    # Parámetros de Comunicación
    # email_destinatario: "equipo@miempresa.com"
    # slack_channel: "#notificaciones-repos"
    # slack_api_token: "xoxb-..." 
    # smtp_host: "smtp.miempresa.com"
    # smtp_user: "automation@miempresa.com"
    # smtp_password: "..."

    # Rutas y URLs
    local_path: "/tmp/{{ repo_nuevo }}_clone"
    
    # Definiremos esta variable para que todas las tareas usen el nuevo token.
    newly_created_pat: ""

    # teams_webhook_url: "https://tuhost.webhook.office.com/webhookb2/..."
    # notification_title: "✅ Playbook Finalizado Exitosamente"
    # notification_text: "El playbook de configuración ha terminado en el servidor {{ inventory_hostname }}."

  tasks:

    # =========================================================================
    # 0. Tareas de Creación del Token de Acceso Personal (PAT)
    #    IMPORTANTE: Este token se usará para el resto de las operaciones.
    # =========================================================================

    # --- 0.1 GitHub PAT Creation (using URI to simulate PAT creation for auth user)
    - name: 0.1 Crear PAT de Usuario en GitHub
      ansible.builtin.uri:
        url: "https://{{ host_repositorio }}/user/tokens"
        method: POST
        headers:
          Authorization: "token {{ admin_token_repositorio }}"
        body_format: json
        body:
          scopes: ["repo", "workflow"] # Alcance amplio para crear y modificar repos
          note: "PAT for {{ repo_nuevo }}"
        status_code: [201]
      when: tipo_repositorio == 'github'
      register: pat_creation_result_github
      
    - name: 0.1.1 Setear nuevo PAT para GitHub
      ansible.builtin.set_fact:
        newly_created_pat: "{{ pat_creation_result_github.json.token }}"
      when: tipo_repositorio == 'github' and pat_creation_result_github is succeeded


    # --- 0.2 GitLab PAT Creation (using dedicated module)
    - name: 0.2 Crear PAT de Usuario en GitLab
      community.gitlab.gitlab_user_access_token:
        api_url: "https://{{ host_repositorio }}"
        api_token: "{{ admin_token_repositorio }}"
        user_id: "{{ usuario }}" # Asumiendo que 'usuario' es el propietario de la API token
        name: "PAT for {{ repo_nuevo }}"
        scopes: ["api", "read_repository", "write_repository"] # Alcance amplio para crear y modificar repos
        state: present
      when: tipo_repositorio == 'gitlab'
      register: pat_creation_result_gitlab

    - name: 0.2.1 Setear nuevo PAT para GitLab
      ansible.builtin.set_fact:
        newly_created_pat: "{{ pat_creation_result_gitlab.access_token }}"
      when: tipo_repositorio == 'gitlab' and pat_creation_result_gitlab is succeeded


    # --- 0.3 Gitea PAT Creation (using URI)
    - name: 0.3 Crear PAT de Usuario en Gitea
      ansible.builtin.uri:
        url: "https://{{ host_repositorio }}/api/v1/users/{{ usuario }}/tokens"
        method: POST
        headers:
          Authorization: "token {{ admin_token_repositorio }}" # Usar el token del admin para crear el token para 'usuario'
        body_format: json
        body:
          name: "PAT for {{ repo_nuevo }}"
          scopes: ["write:repository", "read:repository", "write:issue", "read:issue"] # Alcance amplio
        status_code: [201]
      when: tipo_repositorio == 'gitea'
      register: pat_creation_result_gitea

    - name: 0.3.1 Setear nuevo PAT para Gitea
      ansible.builtin.set_fact:
        newly_created_pat: "{{ pat_creation_result_gitea.json.sha1 }}"
      when: tipo_repositorio == 'gitea' and pat_creation_result_gitea is succeeded


    # =========================================================================
    # 1. Tareas de Creación de Repositorio y Webhook (Usando el nuevo PAT)
    # =========================================================================

    - name: 1.1 Crear repositorio en GitHub desde plantilla
      community.general.github_repo:
        api_url: "https://{{ host_repositorio }}"
        api_token: "{{ newly_created_pat }}" # <--- USANDO EL NUEVO PAT
        name: "{{ repo_nuevo }}"
        organization: "{{ grupo }}"
        state: "present"
      when: tipo_repositorio == 'github' and newly_created_pat is defined
      register: github_result
      # ... (Resto de tareas de GitHub, GitLab y Gitea siguen, usando {{ newly_created_pat }} en lugar de {{ admin_token_repositorio }}) ...

    # =========================================================================
    # 1. Tareas de Creación (GitHub) - Continuación
    # =========================================================================

    - name: 1.2 Crear Webhook en GitHub
      community.general.github_webhook:
        token: "{{ newly_created_pat }}"
        repo: "{{ grupo }}/{{ repo_nuevo }}"
        url: "{{ webhook_url }}"
        secret: "{{ webhook_secret }}"
        events: "{{ webhook_events }}"
        state: present
      when: tipo_repositorio == 'github' and github_result is succeeded

    - name: 1.3 Establecer URL final para GitHub
      ansible.builtin.set_fact:
        repo_final_url: "{{ github_result.repository.html_url }}"
      when: tipo_repositorio == 'github' and github_result is succeeded


    # =========================================================================
    # 2. Tareas de Creación (GitLab) - Continuación
    # =========================================================================
    
    - name: 2.1 Crear repositorio en GitLab desde plantilla
      community.general.gitlab_project:
        api_url: "https://{{ host_repositorio }}"
        api_token: "{{ newly_created_pat }}"
        name: "{{ repo_nuevo }}"
        path_with_namespace: "{{ grupo }}/{{ repo_nuevo }}"
        state: "present"
      when: tipo_repositorio == 'gitlab' and newly_created_pat is defined
      register: gitlab_result

    - name: 2.2 Crear Webhook en GitLab
      community.general.gitlab_hook:
        api_token: "{{ newly_created_pat }}"
        project_id: "{{ grupo }}/{{ repo_nuevo }}"
        url: "{{ webhook_url }}"
        token: "{{ webhook_secret }}"
        push_events: true
        merge_requests_events: true
        state: present
      when: tipo_repositorio == 'gitlab' and gitlab_result is succeeded

    - name: 2.3 Establecer URL final para GitLab
      ansible.builtin.set_fact:
        repo_final_url: "{{ gitlab_result.project.web_url }}"
      when: tipo_repositorio == 'gitlab' and gitlab_result is succeeded

    # =========================================================================
    # 3. Tareas de Creación (Gitea) - Continuación
    # =========================================================================
    
    - name: 3.1 Crear el nuevo repositorio vacío en Gitea (API)
      ansible.builtin.uri:
        url: "https://{{ host_repositorio }}/api/v1/user/repos"
        method: POST
        headers:
          Authorization: "token {{ newly_created_pat }}" # <--- USANDO EL NUEVO PAT
        body_format: json
        body:
          name: "{{ repo_nuevo }}"
          owner: "{{ grupo }}"
          private: false
        status_code: [201]
      when: tipo_repositorio == 'gitea' and newly_created_pat is defined
      register: gitea_create_result

    - name: 3.2 Establecer URL final para Gitea
      ansible.builtin.set_fact:
        repo_final_url: "{{ gitea_create_result.json.html_url }}"
      when: tipo_repositorio == 'gitea' and gitea_create_result is succeeded

    - name: 3.3 Crear Webhook en Gitea (API)
      ansible.builtin.uri:
        url: "https://{{ host_repositorio }}/api/v1/repos/{{ grupo }}/{{ repo_nuevo }}/hooks"
        method: POST
        headers:
          Authorization: "token {{ newly_created_pat }}" # <--- USANDO EL NUEVO PAT
        body_format: json
        body:
          type: "gitea"
          config:
            url: "{{ webhook_url }}"
            secret: "{{ webhook_secret }}"
            insecure_ssl: "0"
          events: "{{ webhook_events }}"
          active: true
        status_code: [201]
      when: tipo_repositorio == 'gitea' and gitea_create_result is succeeded

    # --- CLONACIÓN Y PUSH DEL CONTENIDO PARA GITEA ---
    # Nota: Aquí se usará el PAT para autenticarse en las URLs de clonación
    
    - name: 3.4 Clonar el repositorio base localmente
      ansible.builtin.git:
        # La URL de clonación debe usar el nuevo PAT
        repo: "https://{{ newly_created_pat }}@{{ host_repositorio }}/{{ grupo }}/{{ repo_base }}.git"
        dest: "{{ local_path }}"
        version: master
        clone: yes
        update: yes
      when: tipo_repositorio == 'gitea' and repo_final_url is defined
      
    # ... (Resto de tareas de Gitea - limpieza y push, usando el nuevo PAT en la URL del push) ...

    - name: 3.5 Eliminar el directorio .git del clon para un nuevo historial
      ansible.builtin.file:
        path: "{{ local_path }}/.git"
        state: absent
      when: tipo_repositorio == 'gitea' and repo_final_url is defined

    - name: 3.6 Inicializar nuevo repositorio Git, agregar contenido y commit
      ansible.builtin.command: "{{ item }}"
      args:
        chdir: "{{ local_path }}"
      loop:
        - git init
        - git add .
        - git commit -m 'Initial commit from template {{ repo_base }}'
      when: tipo_repositorio == 'gitea' and repo_final_url is defined

    - name: 3.7 Añadir remoto y enviar el contenido al nuevo repositorio
      ansible.builtin.command: "{{ item }}"
      args:
        chdir: "{{ local_path }}"
      loop:
        # La URL de push debe usar el nuevo PAT
        - git remote add origin https://{{ newly_created_pat }}@{{ host_repositorio }}/{{ grupo }}/{{ repo_nuevo }}.git
        - git push -u origin master
      when: tipo_repositorio == 'gitea' and repo_final_url is defined

    - name: 3.8 Limpiar el directorio temporal
      ansible.builtin.file:
        path: "{{ local_path }}"
        state: absent
      when: tipo_repositorio == 'gitea' and repo_final_url is defined

    # =========================================================================
    # 4. Tareas de Comunicación
    # =========================================================================

    - name: 4.1 ENVIAR NOTIFICACIÓN POR EMAIL (ansible.builtin.mail)
      ansible.builtin.mail:
        host: "{{ smtp_host }}"
        port: 587
        username: "{{ smtp_user }}"
        password: "{{ smtp_password }}"
        to: "{{ email_destinatario }}"
        subject: "✅ Repositorio Creado [{{ tipo_repositorio | upper }}]: {{ repo_nuevo }}"
        body: |
          Hola,

          Se ha completado la automatización.
          - URL de Acceso: {{ repo_final_url }}
          - Webhook ({{ webhook_url }}) configurado.
          - PAT de usuario creado para este proceso.

          🚨 ¡ADVERTENCIA DE SEGURIDAD! El nuevo PAT de usuario tiene alcance amplio y es visible 
          en los logs de la ejecución (variable 'newly_created_pat'). Debería ser almacenado 
          inmediatamente en un gestor de secretos (Vault) y luego borrado de la plataforma si no es necesario.

          Saludos,
          Plataforma de Automatización AWX/AAP
      when: repo_final_url is defined and repo_final_url != "" and smtp_host is defined and "email" in canales_comunicacion

    - name: 4.2 ENVIAR NOTIFICACIÓN POR SLACK (community.general.slack)
      community.general.slack:
        token: "{{ slack_api_token }}"
        channel: "{{ slack_channel }}"
        msg: "🚀 *Nuevo Repositorio Creado en {{ tipo_repositorio | upper }}*\n- *Nombre:* `{{ repo_nuevo }}`\n- *URL:* <{{ repo_final_url }}|Abrir Repositorio>\n- *PAT Creado:* Nuevo PAT de usuario generado para la automatización.\n*(Recuperar el valor del PAT de los logs de AWX/AAP)*"
        username: "AWX Automation"
        icon_emoji: ":rocket:"
      when: repo_final_url is defined and repo_final_url != "" and slack_api_token is defined and "slack" in canales_comunicacion

    - name: Enviar mensaje a Microsoft Teams
      ansible.builtin.uri:
        url: "{{ teams_webhook_url }}"
        method: POST
        body_format: json
        status_code: 200
        body:
          title: "{{ notification_title }}"
          text: "{{ notification_text }}"
      delegate_to: localhost
      when: repo_final_url is defined and repo_final_url != "" and teams_webhook_url is defined and "teams" in canales_comunicacion